# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Geq-rIkiD-WmNb5bYPdn_jO148zoQOWN
"""



!pip install transformers torch gradio PyPDF2
import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import PyPDF2
import io

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# Generate text response from model
def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}
    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

# Extract text from PDF
def extract_text_from_pdf(pdf_file):
    if pdf_file is None:
        return ""
    try:
        pdf_reader = PyPDF2.PdfReader(pdf_file)
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text() + "\n"
        return text
    except Exception as e:
        return f"Error reading PDF: {str(e)}"

# Eco tips generator
def eco_tips_generator(problem_keywords):
    prompt = f"Generate practical and actionable eco-friendly tips for sustainable living related to: {problem_keywords}. Provide specific solutions and suggest."
    return generate_response(prompt, max_length=1000)

# Policy summarizer
def policy_summarization(pdf_file, policy_text):
    if pdf_file is not None:
        content = extract_text_from_pdf(pdf_file)
        summary_prompt = f"Summarize the following policy document and extract the most important points, key provisions, and implications:\n\n{content}"
    else:
        summary_prompt = f"Summarize the following policy document and extract the most important points, key provisions, and implications:\n\n{policy_text}"
    return generate_response(summary_prompt, max_length=1200)

# Q&A on policy documents (NEW)
def policy_qa(pdf_file, question):
    if pdf_file is not None:
        content = extract_text_from_pdf(pdf_file)
    else:
        return "Please upload a policy document first."
    qa_prompt = f"Based on the following policy document, answer the question:\n\n{content}\n\nQuestion: {question}\nAnswer clearly and concisely:"
    return generate_response(qa_prompt, max_length=800)

# Generate step-by-step action plan (NEW)
def generate_action_plan(problem_keywords):
    prompt = f"Generate a detailed step-by-step action plan for sustainable living related to: {problem_keywords}. Include practical steps, stakeholders involved, and possible challenges."
    return generate_response(prompt, max_length=1200)

# Gradio Interface
with gr.Blocks() as app:
    gr.Markdown("## ðŸŒ† Smart City Virtual Assistant & Analyzer")

    with gr.Tabs():
        # Eco Tips Tab
        with gr.Tab("Eco Tips Generator"):
            with gr.Row():
                with gr.Column():
                    keywords_input = gr.Textbox(
                        label="Environmental Problem/Keywords",
                        placeholder="e.g., plastic, solar, water waste, energy saving...",
                        lines=3
                    )
            generate_tips_btn = gr.Button("Generate Eco Tips")
            with gr.Column():
                tips_output = gr.Textbox(label="Sustainable Living Tips", lines=15)
            generate_tips_btn.click(eco_tips_generator, inputs=keywords_input, outputs=tips_output)

        # Policy Summarization Tab
        with gr.Tab("Policy Summarization"):
            with gr.Row():
                with gr.Column():
                    pdf_upload = gr.File(label="Upload Policy PDF", file_types=['.pdf'])
                    policy_text_input = gr.Textbox(
                        label="Or paste policy text here",
                        placeholder="Paste policy document text...",
                        lines=5
                    )
                    summarize_btn = gr.Button("Summarize Policy")
            with gr.Column():
                summary_output = gr.Textbox(label="Policy Summary & Key Points", lines=20)
            summarize_btn.click(policy_summarization, inputs=[pdf_upload, policy_text_input], outputs=summary_output)

        # Policy Q&A Tab (NEW)
        with gr.Tab("Policy Q&A"):
            with gr.Row():
                with gr.Column():
                    qa_pdf_upload = gr.File(label="Upload Policy PDF", file_types=['.pdf'])
                    question_input = gr.Textbox(
                        label="Ask a Question about the Policy",
                        placeholder="e.g., What does this policy say about renewable energy?",
                        lines=3
                    )
                    ask_btn = gr.Button("Get Answer")
            with gr.Column():
                qa_output = gr.Textbox(label="Answer", lines=15)
            ask_btn.click(policy_qa, inputs=[qa_pdf_upload, question_input], outputs=qa_output)

        # Action Plan Generator Tab (NEW)
        with gr.Tab("Action Plan Generator"):
            with gr.Row():
                with gr.Column():
                    action_keywords_input = gr.Textbox(
                        label="Problem/Keywords for Action Plan",
                        placeholder="e.g., reduce water waste in cities",
                        lines=3
                    )
                    action_btn = gr.Button("Generate Action Plan")
            with gr.Column():
                action_output = gr.Textbox(label="Action Plan", lines=20)
            action_btn.click(generate_action_plan, inputs=action_keywords_input, outputs=action_output)

app.launch(share=True)